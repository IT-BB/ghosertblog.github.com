---
layout: post
title: "Ubuntu桌面生存指南 (5) --- Ubuntu常用效率软件简介"
date: 2013-01-07 19:45
comments: true
categories: [Ubuntu, Linux, Tools]
---


## Ubuntu常用效率软件简介

之前的一系列博客里，基本上我们夯实了使用Ubuntu系统所需的基础知识，这一篇里我们来谈谈在这个低调而强大的平台上，如何使得操作者遵循系统的设计理念，通过恰当的选用软件，从而达到人机合一的化境，将这个平台的潜能发挥到极致，进而十倍，百倍的提升操作者的生产效率。我们就接着聊聊Ubuntu/Linux下的常用效率软件，网络上常常有Linux用户在学习，使用了这个平台上的软件以后发出这样的感叹：“几乎每一个Linux软件都可以写成一本书”。这基本上就是Linux系软件强大到令人敬畏的最好注脚。也因此在有限的篇幅里不可能涵盖那么多软件的方方面面，更何况笔者本人视野有限，故以下文字只做提纲挈领的引介，希望起到抛砖引玉，启示读者的作用。这一篇里先对常用软件做简介，考虑到Linux作为一个开发者系统的角色，我们在下篇里再介绍针对开发者需要的软件。大体上我会按以下思路介绍每个软件：

1. 软件背景
2. 安装配置
3. 入门与心得

<!--more-->

## 编辑器之神：GVim

Vi/Vim是Linux系机器默认标配的编辑器软件，基本上我认为你可以不需要Linux上的任何其它软件，但是你不可以说：“我想学Linux，但是我不想学Vi/Vim”。Vi/Vim的学习曲线很高，但是你一定需要学会的理由是：

**1. 文本系统**

Linux系统是基于命令，文本配置的系统，更别说如果你还是一个开发者需要写代码，不能熟练使用世人尊称编辑器之神的杀手级应用，你在这个GUI不友好的世界里其实寸步难行。

**2. 无处不在**

如果你使用Linux，意味着你不会安心的只使用自己的本地桌面，装上Vi/Vim替代品假装不需要学习Vi/Vim，你更有可能需要远程登录到一个陌生环境去操作另一台Linux，而那个机器上80%的可能只有默认标配的Vi/Vim，这种状况下任谁都会感到很局促，也有变通的方法：我看到很多Windows下的开发者使用ftp客户端从远程机器上去拖拽几个G的日志文件到本地，然后再使用Windows上的编辑器花几分钟时间加载这个巨大的文件，这还没有结束，如果问题没有结束，这个痛苦费力的过程继续一而再，再而三的重复下去。这个时候我常常想他们为什么不把这些时间花在学习Vi/Vim上呢？

**3. 高效编辑**

作为编辑器，Vi/Vim发展至今，再配合精良的插件机制，其功能的丰富和强悍已经超越了人类可以做到想到的极限。在最初，鼠标出现以前，人类只能依靠键盘操作电脑，码字，尤其是如何高效码字是其中重要的一项操作，Vi/Vim就是被设计成高效使用键盘码字的工具。所以它分了三种编辑模式，在细节上，规定所有击键行为只发生在主键盘区：只是为了避免双手哪怕多几个厘米间的位移产生的效率损耗。还是为了向效率妥协，它设计了种种反人类的操作方式来实现各种编辑功能，为了追求编辑效率，它向人类施加操作成本和记忆负担。在鼠标出现以后，理应只为键盘服务的码字软件却因为它的高效设计在程序员中间依然有很高的接受度。这种现象其实更应该让我们反思今天所谓讨好普通用户的人机设计中到底存在哪些问题。

**4. 一劳永逸**

学习Vi/Vim并不是在学习Vi/Vim本身，而是在学习一套使用键盘操控计算机的规范(例如：hjkl表示左下上右)，由于这套规范被很多人认可接受已经成为一种**标准规范**，所以这套**标准规范**被嫁接到其它许多的软件上诸如：Vimperator， w3m， Eclipse， 甚至是GVim的死敌Emacs。可见作为一种约定成俗的标准，学习Vi/Vim的边际效益十分可观，你只要学会这种规范，就可以在许多地方——不止于编辑器本身，发挥学习成果的威力。

### 软件安装配置

Vi/Vim 本身不需要安装，但是如果你更乐衷于视觉效果更好，功能更丰富的GUI版本可以安装GVim:
```
$ sudo apt-get install vim-gnome
```
安装完毕以后，在终端界面中随时键入以下命令就可以开始编辑文件：
```
$ vi filename
$ gvim -f filename # Ubuntu 12.04 和 gvim 有冲突，需要加 -f 参数，否则启动gvim后有假死现象。
```
配置文件位于：

1. ~/.vimrc 主要用于编辑器本身相关的设置，例如：字体，快捷键，插件相关设置。
2. ~/.vim 目录用于存放设置前后背景色，语法高亮等主题文件，第三方插件文件等。

插件管理：

由于传统的Vim插件只需要在下载后拷贝进上述 ~/.vim 目录，一来不方便管理：每个插件都会有三四个子目录散落在~/.vim这个主目录里，二来不方便更新插件：如果插件有更新，需要重复拷贝插件至~/.vim目录的步骤。为了解决这两个问题，最近比较流行的插件管理方法是首先安装另一个名为 [pathogen] 的管理插件的插件，然后新建目录
```
$ mkdir -p ~/.vim/bundle
```
以后所有的插件都可以通过 git clone 的方式（关于 git，有兴趣的同学可以先参考这里： [github]），拷贝到 ~/.vim/bundle 例如：安装名为 [vim-css-color] 的插件用于高亮css中的颜色代码，只需要：
```
$ cd ~/.vim/bundle
$ git clone https://github.com/skammer/vim-css-color.git
```
这样插件文件会被集中管理在~/.vim/bundle/vim-css-color，同时只需要在插件目录中执行 git pull 就可以一键更新，vim-css-color 插件效果图如下。

![vim css color]

### 入门与心得

Vi/Vim 纵使有诸多好处，阻碍人类使用它的最大障碍在于陡峭的学习曲线。我在网络上听到过哀鸿遍野的声音：“学不会快捷键，学了就忘，太难用了，放弃了”。因为没有循序渐进的阶梯，所以希望学会Vi/Vim的初学者需要集中一段时间的精力反复操练，好像一道坎一样，跨过去别有洞天，过不去就放弃了。再打个鲤鱼跃龙门的比方，你需要卯足了气力使劲跳，跳过去成龙，跳不过去放弃了就始终是条鱼，这就是学习Vi/Vim的真实写照。所以这个事情首先取决于练习者的决心，其次我们再来讲一些学习技巧。

关于学习Vi/Vim的资源，在网络上不计其数，我看到过各种书籍，文章，博客，有同学很认真的在阅读，翻看，甚至记录笔记，还有许多同学，把所有快捷键的图片作为背景设置在桌面上，甚至彩打在纸张上，贴在自己的电脑边。这里面其实有一些问题：1. 只言片语的文章博客并不能系统的告诉你到底哪些Vim操作是最基本需要掌握的。2. 反过来，煞有其事的找来一本书看，你又迷失在“知识”的海洋里。3. 因为知道学习Vi/Vim这个事情是有记忆成本的，而采用设背景，贴墙纸的方法试图能时常提醒自己不要遗忘各种键法。看上去逻辑很完备，但是对于一个强调操作和手感的工具，大多数同学的努力实际上找错了方向：**找手感需要锻炼的是肌肉记忆而不是脑力记忆**。关键的问题不在于你看了多少关于 Vi/Vim 的文章，书，记了多少笔记，脑子是否记住了那些快捷键，关键的问题在于**你对最基础的操作有过多少次反复的练习，通过这些大量的练习是否建立起了适用情景和键法之间的条件反射，我这里称其为肌肉记忆**。也就是说你需要通过大量的基础练习强化神经脊髓质的厚度，训练自己建立情景<->键法的条件反射，把这种反射刻在肌肉记忆里，一旦通过训练形成这种反射，在某种程度上，就是比思考或者回忆更有效的应激反应，也就是说你可以省去思考或者回忆的过程，直接对某个场景做出编辑操作，例如：拷贝一段文字到另一端文字后面，删除替换某个词语，回到文件头部等等，你不用去想我该按哪些快捷键去做这些操作，你的双手很自然的就会敲击出正确的键法，省略了耗时的思考，回忆键法的过程，操作者的效率自然倍增。Vi/Vim 的使用者往往会有这样神奇的体验：小白在你边上看你编辑文本，屏幕上的光标仿佛可以跟随人的眼睛和意念四处游走，操作者没有使用鼠标，完全用键法掌控编辑过程，这个时候小白经不住打断你，询问你怎么复制指定的段落，你往往不能马上回答，你需要重新把双手放回主键盘区，让你的手自然击键给出正确的答案，这就是我们之前说的条件反射替代了思考回忆，记住这个操作的是通过反复训练的肌肉而不是你的大脑，所以手可以迅速地给出答案，但是大脑没办法马上回答，它需要回忆动作，分解操作步骤，最后确认无误，再告诉你答案。通过刻苦的训练建立条件反射从而提高效率，提升技能水平，这其实和世界上其它的技能修行例如：乐器演奏，书法，外语没有任何区别。引申开去，如果你可以在日常生活中更多的运用这个技巧：建立更多的条件反射替代脑力决策，你就可以更高效，更轻松的完成任务。但是这其中又要有适应场景的辨别能力，经典条件反射其实连狗都可以做到，但是听到铃声没见到肉就开始流口水就上当受骗了。

坏消息是你仍旧需要刻苦的训练，好消息是比起乐器，外语等其它技能，练习Vi/Vim建立条件反射的时间并不很长大约在七天左右，花费七天的时间，换取受益一辈子高效编辑的能力，这实在是一笔合算的交易。况且这里面也没有智力差异的成分，如果觉得自己做不到，想想经典条件反射的实验对象其实是条狗，这个比喻虽然让人不好受，但是真的会很激励人，我自己当时在2006年的一个七天长假里练习Vi/Vim的时候基本就没把自己当人对待。练习的学习资料也唾手可得，很多同学满世界找书，找教程，素不知最有用的教程GVim已经自带了，安装完GVim以后，直接键入：
```
$ vimtutor
```
巧妙的地方在于，这份文本既是一个包含七个章节的学习指南，又是一份可以遍学遍练的习题册，你只需要通读这份文档并按要求操作即可，能够熟练的操作这份文档以后，练习者就具备了使用Vi/Vim编辑文本的基本能力，可以比较从容的使用Vi/Vim应对80%左右的编辑任务。但是在建立反射的初期一定要保证投入足够的时间和练习次数，否则功亏一篑，因此可以在第一遍通读练习完这份教程以后，反复练习这份教程七天左右。无论何时感到百无聊赖的时候，就调出这份教程从头到尾练一遍，保持手热的状态。
有了这个基础做保障以后，你应该尝试沉浸式的学习方法，也就是说，在编辑文本的时候，拒绝除了Vi/Vim以外所有的工具。不要有任何理由接触任何其它的编辑器，如果你是开发者，一定要使用某个IDE，那你也应该看看有没有这个IDE对应的Vim插件：对于主流IDE来说这都不是问题。随后练习者就会步入正轨，渐入佳境：用的越多就越熟练，越熟练就会更高效，更高效就越离不开Vi/Vim，直至开始学习更多Vi/Vim的高阶功能，或者引入更多插件满足更多的编辑需求。形成良性循环以后，一两年里就可以锻炼成高手，这个技能也会伴随你终生，随着时间的推移，你自己都忘记这是一项“很了不起的，很多人没学会”的技能。


## 搜索的艺术：find & grep

我们在前面的博客里反复强调了搜索的重要性，**搜索优于导航**是提升操作效率的一个关键问题。这里就介绍几个Linux下的常用搜索命令。回忆一下本机搜索的需求大致可以分为两大类：

* 按文件名搜索文件
* 按文件内容中的关键字搜索文件

在开始解说如何满足这些需求以前，我其实更想强调读者将**搜索**这个冲动根植在心里，没有这个冲动或者观念你就不会产生想要搜索的需求，大体上你也可以使用鼠标去到处翻文件夹完成等价的工作，区别在于你是想带着目的，付出一些记忆关键字的成本，用最快的速度找到想要的东西，还是漫无目的的浏览，心急火燎的到处乱窜。

### find: 文件名搜索

find 命令可以按许多搜索条件来进行搜索文件，最常用的就是按文件名搜索：
```
$ find -name readme
./Dropbox/backup/eclipse/readme
./Dropbox/backup/windows/EnsoLauncher/readme
./TestProject/web-workspace/TestStruts/readme
```
上述命令指在当前目录下查找文件名是readme的文件，如果文件名过长你无法完全记住，可以选加通配符减小记忆负担例如：
```
$ find -name read*
./Dropbox/backup/eclipse/readme
./Dropbox/backup/windows/EnsoLauncher/readme
./TestProject/web-workspace/TestStruts/readme
```
更多用法参考 man：
```
$ man find
```

### grep: 文件内容搜索

grep 是很多有经验的开发者最常用的一个命令，如果你不知道文件在哪里，但是你知道文件中的几个关键字，你就可以把它找出来：
```
$ grep 搜索的艺术 * -r
source/_posts/2013-01-07-ubuntu-efficient-software.markdown:## 搜索的艺术：find & grep
```
这个是我在本机搜索这篇博客当前小标题的结果， * 是指搜索当前目录的所有文件， -r 是指递归当前目录进行搜索。更多用法参考 man：
```
$ man grep
```

## 砍掉使用鼠标最后的借口：keynav

使用一个Linux系统虽然在80%的状况下你可以没有障碍地使用键盘完成所有操控，但是仍然可能会有一些只能使用鼠标的状况出现，例如：某个GUI软件没有提供相应的快捷键，或者即使提供了，你还不清楚。这个时候可以调出 [keynav] 这个软件，砍掉使用鼠标的最后一个借口。[keynav] 被用来替代鼠标点击屏幕上的任意一个像素。它的设计思想是这样的：运用键盘快捷键，它可以显式的将整个屏幕分割成四个区域，然后输入hjkl代表左下上右（很耳熟？）像两分法那样，把整个屏幕分割成左一半或者下一半或者上一半或者右一半，在当前的半个屏幕内重复输入hjkl持续进行屏幕的两分操作，这样显式高亮的区域会越来越小（多一次分割面积缩小一半），一直小这个区域的中心点和你想点击的目标区域重合，这个过程就是模拟鼠标从当前位置移动到目标位置的过程，此时再次键入快捷键完成模拟鼠标点击的动作即可，这样理论上，在没有更好选择的情况下，你就可以使用键盘模拟鼠标完成任意点击工作，进而避免双手在主键盘区和鼠标之间的来回切换，节省宝贵的操作时间。那么这样做效率如何？根据计算，在一块分辨率为 1920x1200 的屏幕上（适用屏幕尺寸在24英寸以上），点击屏幕上任意一个像素的最坏情况是击键21次做两分法分割屏幕的动作，这个结果有点糟糕，但是实际上，不是每个人都有那么大的屏幕（适合文本工作的显示器大小是22英寸，可以得到最佳字点距，此时分辨率大小为 1680x1050），再者，就算是鼠标，也没有认定需要精确到一个像素的大小才可以点击，我们点击的对象往往是一个像素区域，例如：一个工具栏，一个按钮，一个文本框，这样以点击按钮为例：按钮占据60x25个像素区域，在1920x1200的屏幕上最差需要击键11次完成定位。这个只是最差情况，以笔者22英寸显示器的使用经验来说，4到5次击键即可完成定位，效率不会比鼠标更高，但是完成定位点击的耗时绝对不会比省下切换鼠标的时间更多。至此，我们完成了使用 [keynav] 替代鼠标的理论验证和实践证明，读者不妨可以大胆拔掉鼠标。

### 软件安装配置

Ubuntu 的官方源默认自带这个软件：
```
$ sudo apt-get install keynav
```
配置文件位于：~/.keynavrc 可自行修改快捷键。

另外你可以设法让这个软件随机启动：
```
$ vi ~/.xprofile
```
加入一行：keynav 重新登录系统即可。

### 入门与心得

首次启动后，按 "ctrl + ;" 激活显式高亮区，再按hjkl移动定位，最后按空格键模拟鼠标点击。掌握这个软件并不需要太长时间，可以参考 [官网][keynav] 和 demo[keynav-demo] 演示。

更多用法参考 man：
```
$ man find
```

## 文本浏览器：w3m

在这个GUI横行的世界，笔者推荐一个兼容中文的文本浏览器：w3m，你需要一个文本浏览器的理由：

**1. 速度和专注**

无需加载图片，加载速度更快，使用户专注文字内容本身，适合比较纯粹的文字阅读，特别是文档查阅。

**2. 运行在终端界面**

它很酷，只需要 bash shell 终端就可以运行，也就是说你是在命令行里上网，即使没有GUI图形系统，也不能阻碍你访问 Web，在许多场合这很重要：

* 无法进入图形界面需要上网搜索方案
* ssh远程登录到某个主机的时候需要直接在那台主机上下载文件，或许那台主机的网速比较给力也没有墙，你也可以避免先在本地下载，再把文件传送到远程机，所以你需要在远程机的终端里直接访问 Web。

**3. 全键盘操作**

终端界面的另一大好处是无法使用鼠标，这就迫使你使用键盘操控文本浏览器，提升浏览效率。而且如果你会使用 Vi/Vim，那么操控 w3m 的体验和 Vi/Vim 高度相似(使用hjkl移动光标，/keyword 查询关键字等等)。

**4. 格式渲染，中文支持完善**

使用 w3m 的 web 渲染效果很美观，用 w3m 访问 gmail 的效果图：

![w3m-gmail]

### 软件安装配置

安装 w3m 非常简单：
```
sudo apt-get install w3m
```

如果想更改部分快捷键，例如：更改上下翻页的快捷键和 Vi/Vim 的翻页快捷键一致（Ctrl-d，Ctrl-u），可以新建文件：
```
vi ~/.w3m/keymap
```
输入一下内容，重新绑定快捷键：
keymap C-d NEXT_PAGE
keymap C-u PREV_PAGE

### 入门与心得

安装完毕以后，打开终端输入：
```
$ w3m http://www.douban.com
```
即可访问豆瓣，hjkl：移动光标，/keyward回车：搜索关键字并定位光标到目标对象，如果目标是一个链接，直接回车即可跳转。持续的按Tab键则可以自上而下的切换当前页面上的链接，回车可以跳转，按Tab+Shift则自下而上反向切换。最最基本的功能就是这些，如果想查看更详细的功能，打开 w3m 后按 Shift+h 查看快捷键。


## 屏幕管理器：tmux

## 火狐的瑞士军刀：Vimperator




**未完待续......**


[pathogen]: https://github.com/tpope/vim-pathogen
[github]: https://github.com/
[vim-css-color]: https://github.com/skammer/vim-css-color
[vim css color]: /images/ubuntu_living_handbook/vim-css-color.png "vim css color sceenshot"
[keynav]: http://www.semicomplete.com/projects/keynav/
[keynav-demo]: http://www.semicomplete.com/projects/keynav/keynav.html
[w3m-gmail]: /images/ubuntu_living_handbook/w3m-gmail.png "w3m gmail"

