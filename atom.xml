<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[张佳伟的博客]]></title>
  <link href="http://ghosertBlog.github.com/atom.xml" rel="self"/>
  <link href="http://ghosertBlog.github.com/"/>
  <updated>2012-10-21T01:30:27+08:00</updated>
  <id>http://ghosertBlog.github.com/</id>
  <author>
    <name><![CDATA[张佳伟]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu桌面生存指南 (1) --- Ubuntu桌面体验简介]]></title>
    <link href="http://ghosertBlog.github.com/blog/2012/10/14/ubuntu-living-handbook/"/>
    <updated>2012-10-14T22:49:00+08:00</updated>
    <id>http://ghosertBlog.github.com/blog/2012/10/14/ubuntu-living-handbook</id>
    <content type="html"><![CDATA[<h2>缘起</h2>

<p>我大概是从2010年4月份开始把自己的桌面开发环境从 Windows XP 迁移到 Ubuntu 10.04 的，说起来也已经有两年半的 Ubuntu 使用经验。那次迁移的原因大致是因为某个阶段特别迷恋如何高效的操作电脑，当时把 Windows 整的很伏贴，但是说到高效的使用电脑，不可能对 Linux 系统视而不见。其次就是瞥到一个同事在捣鼓 Ubuntu， 加上毕竟 Windows 环境生存了十几年时间，再多的新鲜感也用尽了，当时很想试试在 Linux 下是不是可以完成在 Windows 下等价的工作。当然，两年半以后，很多结论都是不言自明的。所以《Ubuntu桌面生存指南》是我在两年半时间里，对 Ubuntu 这个发行版的使用心得，我会涉及必要的基础知识，帮助诸位理解，但是不会做到教科书式的面面俱到，或者涉猎太过艰深又不实用的技巧，行文的唯一目的正如题目所示，是尽可能帮助那些对 Ubuntu/Linux 感兴趣的人首先生存在这个平台，不至于因为这样那样的不方便错过或者误解一个优秀的发行版。</p>

<!--more-->


<h2>生存渐进史</h2>

<p><strong> Windows -> VirtualBox -> Wubi -> Dedicated Partition </strong></p>

<p>想学习一个操作系统最好的手段就是把自己所有的日常工作都切换到那个操作系统里去，这种沉浸式的学习方法在很多领域都适用，比如学习一门外语，学习一种编程语言，不断的碰壁和寻找解决方案在最初可能花费大量的时间，但是，不断的记录问题，写下答案，反复的遇到相同的问题，参考答案，再次实践当初的答案或者找到更优的答案，如此循序渐进以后，如果你看到一个高手可以在你束手无策的时候敲下长长的一串莫名其妙的命令，然后扬长而去，千万别惊奇，这里面没有智力的成分，也没有记忆力好坏的区别——无奇，唯手熟尔。因此最初我是在公司的 Windows 下安装虚拟机，当我发觉这种剪不断理还乱的方式，让我仍旧依赖 Windows 的时候，促使我很快就转换到 Wubi 的安装方式，再接着稳定使用了一年半以后就正式把 Wubi 移植到独立分区，从物理分区的角度告别了使用将近十几年的 Windows 平台，转而，在 Ubuntu 的 host 里虚拟了 Windows 的 guest。至此，总共是两年半。完成了从 Windows Host with Ubuntu Guest 到 Ubuntu Host with Windows Guest 的转换。套用美国佬的世界观，我们终于可以从一个不自由的世界走向一个自由世界了。</p>

<h2>三个虚拟世界：Linux， Mac， Windows</h2>

<ul>
<li>Linux     -> 开发人员，科学家，工程师的开发者系统</li>
<li>Windows   -> 老百姓的普罗大众系统</li>
<li>Mac       -> 上述两者之间，部分不明真相的群众，以及高端装系统</li>
</ul>


<p>每个操作系统都有自己的用户，促成他们选择使用某一个系统的因素有很多，最大的原因是拒绝改变，这也成就了 Windows 平台的繁荣，但是这里不含贬义，拒绝改变的背后是因为普罗大众的生活重心并不全是计算机，他们更愿意把时间花在自己关心的领域，计算机只要够用，适用就可以接受。这一条不仅在非 IT 领域成立，即便在 IT 领域，如果你不是一线的开发人员，同样成立。撇开拒绝改变以外，每个能够存活到今天的系统本身都已经没有优劣的区分，剩下的就是理念，哲学，用途的区别，Windows， Mac， Linux 都有各自旗帜鲜明的个性，在那些不同的旗帜背后，都有坚定的拥护者，他们在自己的立场都做出了正确的选择。因此，不同阵营的旗手互相之间做无谓的争论幷无太多意义。但是如果你是一个暂时还没有使用 Ubuntu/Linux 的开发者，程序员，希望这个系列文章可以改变你的看法。</p>

<h2>开发者的操作系统</h2>

<p>Linux 是从极客的学生宿舍里走出来的操作系统，更是通过互联网完成协同开发的典范，汇集了全球极客的智慧。因此它也是一个开发者相当友好的操作系统，它的所有设计理念和哲学都是假定开发者作为最终用户的。从其它操作系统迁徙到 Linux 的时候一定要牢记这点，否则就无法理解很多事情。从这个角度说，很多争执哪个操作系统更优秀的前提就已经错了，比尔盖茨在1983年就告诉所有人他的梦想是人人有电脑可用。所以 Windows 注定是一个普罗大众为最终用户的系统，两个系统有各自的目标用户，那还吵什么呢？许多耸人听闻的报刊，杂志，博文时不时的就列出一些统计数据，然后吼一嗓子：“Linux 桌面已死！”，真心混淆视听。不过在一个商业化气氛浓厚的社会，即便是开发人员，我们也已经太长时间被 Windows 这样假定普罗大众为最终用户的系统惯坏了。我们习惯下载安装二进制文件而不是从源码开始编译，我们习惯使用鼠标而不是键盘操作电脑，我们认为没有图形界面不可想象，我们面对终端束手无策，并且经常分不清出方便和高效之间的差别。所以如果你从来没有认真使用过 Linux 千万别先忙着下结论，否则未免会有失偏颇。安装这个系统，使用这个系统，解决你的问题，然后再看是不是对你的胃口。理论上说，使用一个为开发者准备的操作系统不会有太多的为难，如果你感觉困难，只有两个原因，你拒绝改变或者你真心对开发这个事情没有兴趣，反之，适应了这个环境以后会感觉舒适，安逸。</p>

<p>为了让你或者他们自己更好的使用 Linux ，我们的前人做了很多事情。</p>

<ol>
<li><p>他们首先开源了代码</p>

<p> 这是一个吓坏了封闭和专利系统制作者的决定。因为那些闭源厂商依靠贩卖专利和二进制文件获利，公布自己的代码，并且连带修改和发行权利也一并不要了，这在闭源厂商是不能想象的。相反在开源系统中，开发者求知的愿望被充分尊重了，他们可以任意阅读自己感兴趣的代码，获取知识，修补臭虫，甚至参与开源项目，结识更多其它有求知欲的极客，从而提高自己的开发水平。在闭源系统中，开发者只能依赖厂商提供的 API，文档以及定期的补丁包&#8211;这些同样是普罗大众不那么关心但是开发者所不能接受的。因此使用开源系统无疑可以增强的技能水准，并且在使用系统的同时有机会改进和修补自己的系统。</p></li>
<li><p>他们更懂开发者</p>

<p> 从诞生之初起，这就是一个极客玩出来的操作系统。与其说他们是在开发操作系统不如说他们是在满足开发者自己的需求，这就是著名的“吃狗食“理论，需要一个开发者系统：1. 动手做一个 -> 2. 生存在其中 -> 3. 体会优劣 -> 4. 修补不足，增进优势使它更适合开发 -> 循环至 1. 生存在其中。所以这个系统会越来越朝着它的方向发展，那就取悦开发者自己。经过大约二十多年的发展，今天的开发者系统已经积累了无数提升开发生产力的哲学，理念和工具软件。几乎你能想到的和未能想到的一切和开发相关的需求都已经在开发者系统上被满足了，你需要做的就是学习，练习和使用。即便这仍然不能满足你，开发者系统上很容易对已有的存在做一个分支然后进行自我满足的工作。某些时候没人比你自己更懂自己，更多的时候他们比你更懂你自己，使用开发者系统的开发者时常就会想到要是有这么一个功能就好了，然后 Google 一下相关资料，接着自言自语 “哦。。。果然已经有了”。物以类聚，人以群分，如果我们的行为方式和思维模式相近，那么先前的开发者早就遇到过相同的困扰并且动手解决了问题。你仍然只需要学习，练习和使用，仅此而已。他们懂得键盘比起鼠标在大多数开发场合更高效，他们懂得软件界面首先需要的是命令行，其次才是图形化界面，他们懂得命令优于导航的哲学，你需要编辑器/编译器，他们提供了伟大的 Vim，Emacs/gcc, g++，你需要好用的脚本语言，他们内置了Bash Shell/Python，你需要更高效的操作电脑，他们提供了无数的实用命令行程序，幷为几乎每一个程序配置了无数参数来满足你的需要，很多人连这都会抱怨，为什么没有像样的 GUI 版本，为什么没有像 VB 那样可拖拉的 IDE？ 可是我们幷没有开发这些程序，其实我们没有资格抱怨什么，如果我们需要的幷不存在于开发者系统，那么停止抱怨，仔细思考，更大的可能是不存在意味着不需要，意味着存在会拖累生产力，违背开发者系统的哲学。很多的误解来自长期使用普罗大众系统，我们是被惯坏的一代，普罗大众系统假定用户依靠鼠标和直觉去操作系统，他们依靠尽量压缩用户的学习成本去博得方便使用的好名声，很多系统在这方面确实做得很好，很多人不需要阅读使用手册就可以使用软件和操作系统。这同样也是普罗大众系统经过几十年“吃狗食”得到的回报。但是仔细想想这是开发者需要的系统吗？普罗大众和开发者站在两个各自的立场，有各自的需求。如果开发者觉得普罗大众系统很好用，这现象本身就很值得探讨，肯定有地方出错了不是吗？</p>

<p> 何况这是一个开发者友好的系统，那么为什么还是有许多开发者并不适应？其实我们忘记了一个最简单的道理，技能是需要习得的。开发者不能按普罗大众的要求来要求自己，方便和高效其实并不是等价的，普罗大众系统的方便是依靠牺牲效率和可定制性来达成的，例如鼠标点击运行程序看起来比输入命令启动程序方便很多，但是如果你需要从上百个图标里寻找那个程序会怎么样？你又能不能启动程序的时候要求启动后最大化窗口？所以开发者系统开始不断增加命令，配置，选项和各类约定来追求效率和可定制性。而一旦我们认为效率和可定制性更重要的时候，记忆的负担，学习的成本就出现了，我们需要去学习记忆，熟练运用那些命令配置，了解约定，遵守约定。开发者需要不断的学习技能以追求更高效的使用开发者系统，这才是开发者和普罗大众的本质区别，这个世界上幷没有那么多好处全你占的事情，提升效率的前提便是增加学习成本，容忍一定程度的不那么方便。了解这个事实以后，读者自行权衡，然后我们才能说接下来的事情。</p></li>
</ol>


<h2>Linux 哲学</h2>

<p>命令行与图形化</p>

<h2>选择 Ubuntu</h2>

<h2>生存概要体会</h2>

<p>对于开发者，毋庸置疑，Ubuntu/Linux 是一线程序员的最佳开发平台。</p>

<h2>12.04 VS 10.04</h2>

<p>https://dl.dropbox.com/u/30301809/why_linux/why_linux.pdf</p>

<p>如果你已经开始对这个系统产生兴趣，我们从安装开始说起。</p>

<p>未完待续&#8230;&#8230;</p>

<p><img src="http://ghosertBlog.github.com/images/ubuntu_living_handbook/ubuntu12.04_install.jpg" alt="Ubuntu12.04_Install" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[极客的博客]]></title>
    <link href="http://ghosertBlog.github.com/blog/2012/04/20/geeks-blog/"/>
    <updated>2012-04-20T00:30:00+08:00</updated>
    <id>http://ghosertBlog.github.com/blog/2012/04/20/geeks-blog</id>
    <content type="html"><![CDATA[<h2>缘起</h2>

<p>几乎每一个使用 <strong><a href="http://octopress.org/">Octopress</a></strong> 写博客的极客，第一篇博客必然是讨论 Octopress 本身, 我也不应该例外。</p>

<!--more-->


<h2>关于极客和我</h2>

<p>假使按照极客的个性，哪怕只是自我标榜一下极客的身份也像是在哗众取宠般的做作，印象里极客应该低调，是别人称呼的，如果我自己标榜自己，我那么的高调，那我还是极客吗？如此这般，似乎产生了逻辑上的自我矛盾，所以理论上我不应该自我标榜极客，有贴金的嫌疑，何况博客是给大家看的，假使周遭的熟识对我从来没有极客的印象，又或者我不够资格到极客的水准，那我的第一篇博客就是在胡说八道，乱人视听，诸君报以一顿嗤之以鼻后姗姗离去，那我这是何苦来哉？ 不过虽然我自觉我这个人这般也差，那般也比不上别人，但是笨有笨的好处，蛮有蛮的力气，傻傻如郭靖，一根大条练到底，不过是练练少林长拳，耍起来虎虎生风，终究还是可以不一样。计算机与之我，譬如少林长拳与之郭靖，一路黑到底，约莫估计会有 <strong><a href="http://book.douban.com/subject/3134517/">Outliers</a></strong> 里 10000 小时理论的成效。再则，自从踏上这个行当，到底觉得就是因为这股子傻劲让我和别人不太一样，所以先在这里厚着脸皮标榜一番，三年五载之后，看官自有定论。</p>

<h2>为什么要写博客？</h2>

<p>关于这个问题，参考刘未鹏的<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/">为什么你应该（从现在开始就）写博客</a>。然而年过三十，心智方才成熟到觉得必须留下点什么的程度，回望从前只有感叹虚掷年华的份儿，好在亡羊补牢，犹为晚也，好坏开个头吧。</p>

<h2>为什么是 Octopress ？</h2>

<p>图个方便，大可新浪博客，搜狐博客，CSDN 博客之流，只是提及这些个博客只怕更多联想到苍井空老师，袁萌老师之流，大煞风景，考虑到极客之精神所在，我辈以与之同流合污为耻。李笑来老师是明白这个道理的，他用了更符合 DIY 要义的 <strong><a href="http://wordpress.org/">WordPress</a></strong>，然而毕竟不能以我们的眼光太过要求一个新东方老师的博客标准，因为即使牛人如刘未鹏也并未使用 Octopress 来写博客，他也用 WordPress。所以是 WordPress？我差点就这么想了，但是关于 WordPress，我看到了自购主机，我看到了 MySQL，我看到了在线编辑。略微权衡一下，这些似乎就已经偏离了精神之所在，所以我想一定有其它的存在吧。</p>

<p>那么一个极客眼中的博客应该具备哪些要素？</p>

<ol>
<li><p><strong>基于文本的编辑</strong></p>

<p> 作为极客，你必须很在意 Vim, Emacs 之流，你应该鄙视一切在 Office，Web 里的文字工作，Office 之流很方便使用，但是实在没有什么效率。即便在我们这个行业里，很多人至今没有弄清楚方便不等于高效这个道理。所以我个人只认同使用 Vim 方式处理任何文本工作，包括代码和博客。</p></li>
<li><p><strong>方便的书写和阅读格式</strong></p>

<p> 假设你承认上述第一点的理念，那么我们还是在写博客，仍然需要格式化的文字使得文字本身在网络上更富表现力，方便读者阅读。但是 html 是一种很冗余的格式存在，既不方便书写也不方便对编辑的源码直接阅读。同时纯文本的格式又走上了另一个极端，书写和阅读基本没有任何代价，坏处在于纯文本几乎又没有任何表现力，除了可以分出段落，它不能粗体，不能斜体，不能更改字号，不能列表。所以结论是：我们需要一种介于 html 和纯文本之间的格式来书写博客，它有不那么大的书写和阅读的成本，又兼顾一定的文字表现力。答案就是 <strong><a href="http://daringfireball.net/projects/markdown/">Markdown</a></strong>，再送一份红利就是在线的 <strong><a href="http://www.ctrlshift.net/project/markdowneditor/">Markdown Editor</a></strong>。</p></li>
<li><p><strong>灵活的备份和恢复</strong></p>

<p> 这是一条足以放弃 WordPress 的重要理由。我们无非是在码字而已，没有理由引入数据库，基于文本的保存是最安全的保存，它便于检索(grep)，容易导入，导出，不依赖于任何第三方软件或者操作系统。几百年后，这篇文档仍然可以被那时的计算机打开，这很重要，好比我们今天仍然有机会看到前人的青铜器，但是我们的后人只能从图片上看看今天的各类一次性制品。如果要求更高一些，我们还希望有类似管理代码的方式来管理我们的博客，同样是文本，Version Control System 不应该是代码的专有权利。中央服务器也可以保证在任何地方，任何时候检出，更新，提交你的博客，并且也不妨碍除你以外的人这么做。</p></li>
<li><p><strong>基于命令行的操作方式</strong></p>

<p> 极客的重要特征是远离 Windows，所以我们甚至应该幻想一个 Windows 不友好的方式来写博客。它应该尽量基于命令行，在 Linux 系统上运行良好，羞啥那些 Windows 上的普通青年和 Mac 上的文艺青年，这不是说我很大度的表示我就是2B青年，只是我实在不愿意诸君承担2B青年的包袱，只好自己大度的承担罢了。</p></li>
<li><p><strong>支持代码片段的显示</strong></p>

<p> 偶尔想秀个小代码也是装2的内在诉求和外在表现之一，所以我们的博客应该是可以这样子的：</p></li>
</ol>


<figure class='code'><figcaption><span>Code Snips to test code blocks </span><a href='http://www.google.com'>link test</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TestCode</span><span class="p">:</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="k">pass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">testCode</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span> <span class="s">&#39;hello world!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><strong>最后的最后，不缩水的博客</strong></p>

<p>  好处不能都被你这个2B青年占完了不是吗？你要这个要那个，都满足你了，末了扔给你一个缩水的博客，你不由自主的和那些个不入你法眼的新浪博客，不讨巧的 WordPress 做比较了，于是你又开始不满意了。好吧，我们折中一下，RSS 导出不能少，分享到 Facebook，Twitter，甚至于新浪微博也不能落下，还要能访客留言，搜索过往，提示最近的博客，标注 tag。于是是除了你那些个蛋疼的特殊癖好，别人有的也全都要满足。。。</p></li>
</ul>


<h2>极客的博客，答案只能是 Octopress，没有之一</h2>

<p>没有办法了，只能是 Octopress 可以满足我这样的2B青年了。诸君可以去了解，不用我在这里没完没了的磨机。我也不打算罗列详细的步骤去教诸君如何安装 Octopress 了，诸君都是成年人，有理想，有抱负，会 Google，不会 Google，起码也知道度娘其实被 PS 的过分了一些，不是吗？ 为了避免不必要的打击和骂娘的状况出现，我只在诸君打算做这个事情前罗列一些最基本的先决条件，如果诸君实在为难，我们也不能强求对不？</p>

<ul>
<li><p><strong>会 Google，至少会度娘</strong></p></li>
<li><p><strong>你至少有一个 Linux 系统活在 Windows/Mac 的虚拟机里，偶尔也用用</strong></p></li>
<li><p><strong>多少认同 Vim/Emacs，偶尔也用用，起码是用来看日志也算你一个</strong></p></li>
<li><p><strong>了解一些 Ruby，Python 之流的动态语言</strong></p></li>
<li><p><strong>了解 GitHub 和 Git 的一些基础知识，会 pull，能 push</strong></p></li>
<li><p><strong>即使不知道什么是 Markdown 学学也乐意，深表认同 Markdown 哲学</strong></p></li>
</ul>


<p>感情没有哪个公司的招聘里会写上这些个应知应会，所以诸君在工作之余，在这个 Java，.Net 横行的年代里，居然还玩会了这些，不管诸君愿不愿意，我也只能承认你我都2到家了。再看看还有哪些人这么2的，无巧不巧，不用我们自己 Google，Octopress 自己煞有其事的列出了用他们这个博客的网站列表，参见 <strong><a href="https://github.com/imathis/octopress/wiki/Octopress-Sites">Octopress Sites</a></strong>，假使你有耐心一个一个参阅过来，你没有办法不承认他们都是极客的博客。</p>

<h2>缘灭</h2>

<p>木有想到第一篇博客写的这么猴累，再接再厉！欢迎新浪微博加我关注：<strong>ghosert</strong></p>
]]></content>
  </entry>
  
</feed>
